volumes:
  heimdall_storage:
  media_data:
  qbittorrent_data:
  sonarr_data:
  radarr_data:
  bazarr_data:
  lidarr_data:
  readarr_data:
  prowlarr_data:
  jellyseerr_data:
  jellyfin_data:
  tdarr_server:
  tdarr_configs:
  tdarr_logs:
  tdarr_cache:
  komga_config:
  komga_data:
  calibre_config:
  kavita_config:
  kavita_data:
  audiobookshelf_config:
  netdata_config:
  recyclarr_config:
  portainer_data:
  unmanic_config:
  netdata_lib:
  autobrr_config:
  netdata_cache:
  audiobookshelf_metadata:
  notifiarr_config:
  jackett_data:
  organizr_config:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  cloudbeaver_workspace:
  qdrant_storage:
  npm_data:
  npm_letsencrypt:
  kometa_config:
  calibre_web_config:
  navidrome_data:
  openwebui_data:
  uptime_kuma_data:
  onlyoffice_logs:
  onlyoffice_data:
  onlyoffice_lib:
  onlyoffice_db:
  filebrowser_data:
  romm_mysql_data:
  romm_resources:
  romm_redis_data:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
  env_file:
    - path: .env
      required: true

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  restart: unless-stopped
  ports:
    - 11000:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2:1b"

services:
  # --- JELLYFIN -------------------------------------------------------------
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    ports:
      - "8096:8096"
      - "8920:8920"
      - "7359:7359/udp"
    environment:
      TZ: Europe/Madrid
      UMASK: "022"
      JELLYFIN_PublishedServerUrl: "${JELLYFIN_PUBLISHED_URL}"
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,video,utility
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - "F:/_Multimedia/Peliculas:/media/Peliculas"
      - "F:/_Multimedia/Documentales:/media/Documentales"
      - "F:/_Multimedia/Deportes:/media/Deportes"
      - "F:/_Multimedia/Series:/media/Series"
      - "F:/_Multimedia/MiniSeries:/media/MiniSeries"
      - "F:/_Multimedia/TA/media:/media/YouTube"
      - "F:/_Multimedia/metadata:/config"
      - "F:/_Multimedia/cache:/cache"
      - "F:/_Multimedia/transcodes:/transcode"
      - "E:/Peliculas:/media/Peliculas2"
      - "E:/Series:/media/Series2"
      - "E:/MiniSeries:/media/MiniSeries2"

    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8096/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 60s

  # --- TUBEARCHIVIST (UI :8000) --------------------------------------------
  tubearchivist:
    image: bbilly1/tubearchivist:latest
    container_name: tubearchivist
    depends_on:
      - archivist-es
      - archivist-redis
    ports:
      - "8001:8000"
    environment:
      TZ: Europe/Madrid
      TA_HOST: "${TA_HOSTS}"
      TA_USERNAME: "${TA_USERNAME}"
      TA_PASSWORD: "${TA_PASSWORD}"
      ES_URL: "http://archivist-es:9200"
      REDIS_CON: "redis://archivist-redis:6379"
      ELASTIC_PASSWORD: "${TA_ES_PASSWORD}"
      HOST_UID: "1000"
      HOST_GID: "1000"
    volumes:
      - "F:/_Multimedia/TA/media:/youtube"
      - "F:/_Multimedia/TA/cache:/cache"
    restart: unless-stopped
    healthcheck:
      # dentro del contenedor es 8000, no 8001
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health >/dev/null"]
      interval: 2m
      timeout: 10s
      retries: 3
      start_period: 30s

  archivist-redis:
    image: redis/redis-stack-server:latest
    container_name: archivist-redis
    expose: ["6379"]
    volumes:
      - "F:/_Multimedia/TA/redis:/data"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h 127.0.0.1 -p 6379 ping | grep PONG"]
      interval: 30s
      timeout: 5s
      retries: 5

  archivist-es:
    image: bbilly1/tubearchivist-es:latest
    container_name: archivist-es
    environment:
      - ELASTIC_PASSWORD=${TA_ES_PASSWORD}
      - ES_JAVA_OPTS=-Xms512m -Xmx1g
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ES_SETTING_PATH_REPO=/usr/share/elasticsearch/data/snapshot
    expose: ["9200"]
    volumes:
      - "F:/_Multimedia/TA/es:/usr/share/elasticsearch/data"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -u elastic:${TA_ES_PASSWORD} http://localhost:9200 >/dev/null"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 60s

  # --- Gestión de usuarios Jellyfin ----------------------------------------
  jfa-go:
    image: hrfee/jfa-go:latest
    container_name: jfa-go
    depends_on: [jellyfin]
    ports: ["8056:8056"]
    environment:
      - TZ=Europe/Madrid
      - JELLYFIN_URL=http://jellyfin:8096
    volumes:
      - "F:/_Multimedia/jfa-go:/data"
      - "F:/_Multimedia/metadata:/jf:ro"
    restart: unless-stopped

  # --- Estadísticas avanzadas ----------------------------------------------
  jellystat:
    image: cyfershepard/jellystat:latest
    container_name: jellystat
    depends_on:
      jellystat-db:
        condition: service_healthy
    ports: ["3000:3000"]
    environment:
      - TZ=Europe/Madrid
      - POSTGRES_IP=jellystat-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=jellystat
      - POSTGRES_USER=jellystat
      - POSTGRES_PASSWORD=${JELLYSTAT_DB_PASS}
      - JWT_SECRET=${JELLYSTAT_JWT}
      - JELLYFIN_URL=http://jellyfin:8096
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000 >/dev/null"]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 20s

  jellystat-db:
    image: postgres:16
    container_name: jellystat-db
    environment:
      - POSTGRES_DB=jellystat
      - POSTGRES_USER=jellystat
      - POSTGRES_PASSWORD=${JELLYSTAT_DB_PASS}
    volumes:
      - "F:/_Multimedia/jellystat/postgres:/var/lib/postgresql/data"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jellystat -d jellystat -h 127.0.0.1 -p 5432"]
      interval: 30s
      timeout: 5s
      retries: 5
 
  # --- IPTV proxy (xTeVe moderno) ------------------------------------------
  threadfin:
    image: fyb3roptik/threadfin:latest
    container_name: threadfin
    ports: ["34400:34400"]
    environment:
      - TZ=Europe/Madrid
    volumes:
      - "F:/_Multimedia/threadfin:/home/threadfin/.threadfin"
    restart: unless-stopped

  # --- Backend PVR completo (timeshift/DVR) --------------------------------
  tvheadend:
    image: lscr.io/linuxserver/tvheadend:latest
    container_name: tvheadend
    ports:
      - "9981:9981"
      - "9982:9982"
    environment:
      - TZ=Europe/Madrid
      - PUID=1000
      - PGID=1000
    volumes:
      - "F:/_Multimedia/tvheadend/config:/config"
      - "F:/_Multimedia/tvheadend/recordings:/recordings"
    restart: unless-stopped

  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall_dashboard
    restart: unless-stopped
    ports:
      - "7771:80"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - heimdall_storage:/config

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    ports:
      - "8080:8080"
      - "6881:6881"
      - "6881:6881/udp"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
    volumes:
      - qbittorrent_data:/config
      - media_data:/downloads
    restart: unless-stopped

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    ports:
      - "33074:8989"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - sonarr_data:/config
      - media_data:/downloads
      - "F:/_Multimedia/Series:/tv"
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    ports:
      - "33075:7878"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - radarr_data:/config
      - media_data:/downloads
      - "F:/_Multimedia/Peliculas:/movies"
    restart: unless-stopped

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    ports:
      - "33076:6767"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - bazarr_data:/config
      - media_data:/downloads
      - "F:/_Multimedia/Peliculas:/movies:ro"
      - "F:/_Multimedia/Series:/tv:ro"
    restart: unless-stopped

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    ports:
      - "33077:8686"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - lidarr_data:/config
      - media_data:/downloads
    restart: unless-stopped

  readarr:
    image: ghcr.io/hotio/readarr:latest
    container_name: readarr
    ports:
      - "33078:8787"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - readarr_data:/config
      - "F:/_Multimedia/Libros/descargas:/downloads"
      - "F:/_Multimedia/Libros:/books"
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    ports:
      - "33079:9696"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - prowlarr_data:/config
    restart: unless-stopped

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    ports: ["33080:5055"]
    environment:
      - TZ=Europe/Madrid
      - LOG_LEVEL=info
    volumes:
      - jellyseerr_data:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:5055/api/v1/status >/dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  # --- TDARR ---------------------------------------------------------------
  tdarr:
    image: ghcr.io/haveagitgat/tdarr:latest
    container_name: tdarr
    ports:
      - "33081:8265"
      - "33082:8266"
    environment:
      - TZ=Europe/Madrid
      - PUID=1000
      - PGID=1000
      - UMASK_SET=002
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - inContainer=true
      - ffmpegVersion=7
      - nodeName=InternalNode
      - auth=false
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - tdarr_server:/app/server
      - tdarr_configs:/app/configs
      - tdarr_logs:/app/logs
      - media_data:/media
      - tdarr_cache:/temp
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped

  # --- KOMGA ---------------------------------------------------------------
  komga:
    image: gotson/komga:latest
    container_name: komga
    ports: ["33083:25600"]
    environment:
      - TZ=Europe/Madrid
    volumes:
      - komga_config:/config
      - komga_data:/data
    restart: unless-stopped

  # --- CALIBRE -------------------------------------------------------------
  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: calibre
    ports:
      - "33084:8080"
      - "33085:8181"
      - "33087:8081"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - calibre_config:/config
    restart: unless-stopped

  # --- KAVITA --------------------------------------------------------------
  kavita:
    image: lscr.io/linuxserver/kavita:latest
    container_name: kavita
    ports: ["33086:5000"]
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - kavita_config:/config
      - kavita_data:/data
    restart: unless-stopped

  # --- Amule ---------------------------------------------------------------
  amule:
    image: ghcr.io/ngosang/amule
    container_name: amule
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - "C:/amule/config:/config"
      - "D:/Descargas/eMule/Incoming:/downloads/Incoming"
      - "D:/Descargas/eMule/Temp:/downloads/Temp"
    ports:
      - "4711:4711"
      - "4712:4712"
      - "4662:4662/tcp"
      - "4672:4672/udp"
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "9443:9443"
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - "9999:8080"
    environment:
      - TZ=Europe/Madrid
      - DOZZLE_LEVEL=info
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  netdata:
    image: netdata/netdata:stable
    container_name: netdata
    hostname: netdata
    ports:
      - "19999:19999"
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    environment:
      - TZ=Europe/Madrid
    volumes:
      - netdata_config:/etc/netdata
      - netdata_lib:/var/lib/netdata
      - netdata_cache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
    restart: unless-stopped

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: audiobookshelf
    ports:
      - "13378:80"
    environment:
      - TZ=Europe/Madrid
    volumes:
      - audiobookshelf_config:/config
      - audiobookshelf_metadata:/metadata
      - "F:/_Multimedia/Audiolibros:/audiobooks"
      - "F:/_Multimedia/Podcasts:/podcasts"
    restart: unless-stopped

  unmanic:
    image: josh5/unmanic:latest
    container_name: unmanic
    ports:
      - "8888:8888"
    environment:
      - TZ=Europe/Madrid
      - PUID=1000
      - PGID=1000
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      - unmanic_config:/config
      - media_data:/watch
      - "F:/_Multimedia:/library"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu,video,utility]
    restart: unless-stopped

  recyclarr:
    image: ghcr.io/recyclarr/recyclarr:latest
    container_name: recyclarr
    environment:
      - TZ=Europe/Madrid
      - CRON_SCHEDULE=0 5 * * *
    volumes:
      - recyclarr_config:/config
    restart: unless-stopped

  autobrr:
    image: ghcr.io/autobrr/autobrr:latest
    container_name: autobrr
    ports:
      - "7474:7474"
    environment:
      - TZ=Europe/Madrid
    volumes:
      - autobrr_config:/config
    restart: unless-stopped

  newtrackon:
    image: corralpeltzer/newtrackon:latest
    container_name: newtrackon
    ports:
      - "33101:8080"
    command: ["--address=0.0.0.0", "--ignore-ipv6"]
    restart: unless-stopped

  notifiarr:
    image: golift/notifiarr:latest
    container_name: notifiarr
    ports:
      - "5454:5454"
    environment:
      - TZ=Europe/Madrid
      - PUID=1000
      - PGID=1000
    volumes:
      - notifiarr_config:/config
    restart: unless-stopped

  homarr:
    container_name: homarr
    image: ghcr.io/homarr-labs/homarr:latest
    restart: unless-stopped
    ports:
      - "7575:7575"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - F:/_Multimedia/homarr/appdata:/appdata
    environment:
      - SECRET_ENCRYPTION_KEY=e111e33c3056a58c37491e24fd3a90b087f906ab1468893544c23205dd10e96b

  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    ports:
      - "9117:9117"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
      - AUTO_UPDATE=true
    volumes:
      - jackett_data:/config
      - media_data:/downloads
    restart: unless-stopped

  organizr:
    image: ghcr.io/organizr/organizr:latest
    container_name: organizr
    ports:
      - "33102:80"
    environment:
      - TZ=Europe/Madrid
      - PUID=1000
      - PGID=1000
      - branch=v2-master
    volumes:
      - organizr_config:/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost/ > /dev/null || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h 127.0.0.1 -p 5432 -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  cloudbeaver:
    image: dbeaver/cloudbeaver:latest
    container_name: cloudbeaver
    ports:
      - "18978:8978"
    volumes:
      - cloudbeaver_workspace:/opt/cloudbeaver/workspace
    restart: unless-stopped

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
      - ollama-gpu-amd

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    restart: unless-stopped
    ports:
      - "4080:8080"
    environment:
      - SEARXNG_BASE_URL=http://localhost:4080
      # - SEARXNG_SECRET=CAMBIA_ESTA_CLAVE_LARGA_Y_UNICA
    volumes:
      - "F:/SearXNG/config:/etc/searxng"
      - "F:/SearXNG/cache:/var/cache/searxng"

  # --- NGINX PROXY MANAGER (HTTP/HTTPS + Panel) ----------------------------
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "81:81"
    environment:
      - TZ=Europe/Madrid
      - INITIAL_ADMIN_EMAIL=admin@admin.com
      - INITIAL_ADMIN_PASSWORD=admin
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt

  # --- KOMETA (ex Plex-Meta-Manager) ---------------------------------------
  kometa:
    image: lscr.io/linuxserver/kometa:latest
    container_name: kometa
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
      - KOMETA_CONFIG=/config/config.yml
      - KOMETA_TIME=05:00
    volumes:
      - kometa_config:/config

  # --- CALIBRE-WEB (frontend para Calibre) ---------------------------------
  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Madrid
    volumes:
      - calibre_web_config:/config
      - "F:/_Multimedia/Libros:/books"

  # --- NAVIDROME (servidor de música) --------------------------------------
  navidrome:
    image: deluan/navidrome:latest
    container_name: navidrome
    restart: unless-stopped
    ports:
      - "4533:4533"
    environment:
      - TZ=Europe/Madrid
      - ND_LOGLEVEL=info
      - ND_SCANSCHEDULE=1h
    volumes:
      - navidrome_data:/data
      - "F:/_Multimedia/Musica:/music:ro"

  # --- OPEN WEBUI (UI para Ollama/LLMs) ------------------------------------
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: unless-stopped
    ports:
      - "3002:8080"
    environment:
      - OLLAMA_BASE_URL=http://host.docker.internal:11000
      - WEBUI_NAME=OpenWebUI
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - openwebui_data:/app/backend/data

  # --- UPTIME KUMA (monitor de servicios) ----------------------------------
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - uptime_kuma_data:/app/data

  # --- RomM (servidor de videojuegos via web) ----------------------------------
  romm-db:
    image: mariadb:11
    container_name: romm-db
    restart: unless-stopped
    environment:
      - MARIADB_ROOT_PASSWORD=${ROMM_DB_ROOT_PASS}
      - MARIADB_DATABASE=romm
      - MARIADB_USER=admin
      - MARIADB_PASSWORD=${ROMM_DB_PASS}
    volumes:
      - romm_mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 240s   # antes 30s
      interval: 20s        # antes 10s
      timeout: 10s         # antes 5s
      retries: 10          # antes 5

  romm:
    image: rommapp/romm:latest
    container_name: romm
    restart: unless-stopped
    depends_on:
      romm-db:
        condition: service_healthy
    environment:
      - DB_HOST=romm-db
      - DB_PORT=3306
      - DB_NAME=romm
      - DB_USER=admin                # <-- igual que el creado por MariaDB
      - DB_PASSWD=${ROMM_DB_PASS}    # <-- usa la MISMA pass que MARIADB_PASSWORD en romm-db
      - ROMM_AUTH_SECRET_KEY=${ROMM_AUTH_SECRET_KEY}
      - STEAMGRIDDB_API_KEY=${STEAMGRIDDB_API_KEY}
      - IGDB_CLIENT_ID=${IGDB_CLIENT_ID}
      - IGDB_CLIENT_SECRET=${IGDB_CLIENT_SECRET}
      - SCREENSCRAPER_USER=${SCREENSCRAPER_USER}
      - SCREENSCRAPER_PASSWORD=${SCREENSCRAPER_PASSWORD}
    volumes:
      # Recursos descargados (covers, screenshots, etc.)
      - romm_resources:/romm/resources
      # Cache de tareas en background
      - romm_redis_data:/redis-data
      # Tu librería, assets y config.yml (en el host Windows)
      - "E:/ROMM/library:/romm/library"
      - "E:/ROMM/assets:/romm/assets"
      - "E:/ROMM/config:/romm/config"
    ports:
      - "33110:8080"

  # --- Mover de emule a pelis ----------------------------------------------
  moverpelis:
    image: alpine:3.20
    container_name: moverpelis
    command: >
      sh -c 'apk add --no-cache findutils coreutils >/dev/null
      && echo "$(date "+%F %T.%3N") | Monitoreando /watch -> /target (cada 15s, mueve archivos con >1 min sin cambios)..."
      && while :; do
           /usr/bin/find /watch -maxdepth 1 -type f -mmin +1 \
             -exec mv -n -t /target {} +
           sleep 15
         done'
    volumes:
      - "D:/Descargas/eMule/Incoming/pelis:/watch"
      - "E:/Peliculas:/target"
    restart: unless-stopped

  # --- Explorador de carpetas compartidas ----------------------------------
  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    environment:
      - TZ=Europe/Madrid
    volumes:
      - "F:/_Multimedia/Peliculas:/srv/Peliculas:ro"
      - "F:/_Multimedia/Compartida:/srv/Compartida:rw"
      - filebrowser_data:/database
    ports:
      - "18080:80"
    restart: unless-stopped

  # --- Servicio DNS duckDNS ------------------------------------------------
  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    environment:
      - SUBDOMAINS=maripiflix
      - TOKEN=453c480f-666f-42b0-96a3-e1f2ab1f7048
    restart: unless-stopped

  # --- Prueba de GPU -------------------------------------------------------
  test-gpu:
    image: nvidia/cuda:12.9.0-base-ubuntu22.04
    container_name: test-gpu
    command: nvidia-smi
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: "no"
